import { Context, Markup } from 'telegraf';
import { UserCashbackService } from '../services/userCashbackService';
import { CategoryService } from '../services/categoryService';
import { CategoryRepository } from '../database/repositories/CategoryRepository';
import { BankService } from '../services/bankService';
import { UserService } from '../services/userService';
import { FSMManager } from '../services/fsmService';
import { BotState } from '../types/fsm';
import { logger } from '../utils/logger';
import { escapeMarkdown } from '../utils/helpers';

// –£–¥–∞–ª—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å

export class CashbackController {
  constructor(
    private cashbackService: UserCashbackService,
    private categoryService: CategoryService,
    private categoryRepository: CategoryRepository,
    private bankService: BankService,
    private userService: UserService,
  ) {}

  /**
   * –ö–æ–º–∞–Ω–¥–∞: /set_cashback
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –∫—ç—à–±—ç–∫–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  async handleSetCashback(ctx: Context) {
    if (!ctx.from) return;

    try {
      // Set FSM state
      FSMManager.setState(ctx.session!, BotState.SETTING_CASHBACK_BANK);

      const banks = await this.bankService.getActiveBanks();
      const keyboard = banks.map((bank) => [
        Markup.button.callback(bank.name, `select_bank:${bank.code}`),
      ]);

      await ctx.reply('üè¶ *–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫:*', {
        parse_mode: 'Markdown',
        reply_markup: Markup.inlineKeyboard(keyboard).reply_markup,
      });

      logger.info('User started cashback setup', { 
        telegramId: ctx.from.id,
        fsmState: FSMManager.getState(ctx.session!)
      });
    } catch (error) {
      logger.error('Error in handleSetCashback:', { error, telegramId: ctx.from?.id });
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      // Reset FSM state on error
      FSMManager.reset(ctx.session!);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –±–∞–Ω–∫–∞
   */
  async handleBankSelect(ctx: Context, bankCode: string) {
    if (!ctx.from) return;

    try {
      // Check FSM state
      if (!FSMManager.isInState(ctx.session!, BotState.SETTING_CASHBACK_BANK)) {
        await ctx.editMessageText('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /set_cashback');
        FSMManager.reset(ctx.session!);
        return;
      }

      logger.info('Bank selection started', { telegramId: ctx.from.id, bankCode });

      const bank = await this.bankService.getBankByCode(bankCode);
      if (!bank) {
        logger.warn('Bank not found', { telegramId: ctx.from.id, bankCode });
        await ctx.editMessageText('‚ùå –ë–∞–Ω–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      // Store bank data in FSM
      FSMManager.setData(ctx.session!, 'selectedBank', bankCode);
      FSMManager.setData(ctx.session!, 'bankId', bank.id);

      logger.info('Bank found', { telegramId: ctx.from.id, bankCode, bankId: bank.id });

      const categories = await this.categoryService.getCategoriesByBank(bank.id);
      logger.info('Categories retrieved', {
        telegramId: ctx.from.id,
        bankCode,
        bankId: bank.id,
        categoriesCount: categories.length,
      });

      if (categories.length === 0) {
        await ctx.editMessageText('‚ùå –î–ª—è —ç—Ç–æ–≥–æ –±–∞–Ω–∫–∞ –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
        FSMManager.reset(ctx.session!);
        return;
      }

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
      ctx.session = ctx.session || {};
      ctx.session.cashback = ctx.session.cashback || {};
      ctx.session.cashback.selectedBank = bankCode;
      ctx.session.cashback.selectedCategories = [];

      logger.info('Session initialized', {
        telegramId: ctx.from.id,
        bankCode,
        session: JSON.stringify(ctx.session),
      });

      const keyboard = categories.map((cat) => [
        Markup.button.callback(`‚òê ${cat.name}`, `toggle_category:${cat.id}`),
      ]);

      keyboard.push([Markup.button.callback('‚úÖ –ì–æ—Ç–æ–≤–æ', 'confirm_categories')]);

      // Transition to next state
      FSMManager.transition(ctx.session!, 'bank_selected');

      await ctx.editMessageText(
        `üè¶ *${bank.name}*\n\nüìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–±—ç–∫–∞:\n\n` +
          `‚òê - –Ω–µ –≤—ã–±—Ä–∞–Ω–æ\n` +
          `‚òë - –≤—ã–±—Ä–∞–Ω–æ`,
        {
          parse_mode: 'Markdown',
          reply_markup: Markup.inlineKeyboard(keyboard).reply_markup,
        },
      );

      logger.info('Bank selection completed successfully', {
        telegramId: ctx.from.id,
        bankCode,
        bankId: bank.id,
        fsmState: FSMManager.getState(ctx.session!)
      });
    } catch (error) {
      logger.error('Error in handleBankSelect:', {
        error,
        telegramId: ctx.from.id,
        bankCode,
        errorMessage: error instanceof Error ? error.message : 'Unknown error',
        errorStack: error instanceof Error ? error.stack : undefined,
      });
      await ctx.editMessageText('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—á–µ–∫–±–æ–∫—Å)
   */
  async handleToggleCategory(ctx: Context, categoryId: number) {
    if (!ctx.from) return;

    try {
      logger.info('Category toggle started', { telegramId: ctx.from.id, categoryId });

      const session = ctx.session;
      const cashbackSession = session?.cashback;

      logger.info('Session check in toggle', {
        telegramId: ctx.from.id,
        categoryId,
        session: JSON.stringify(session),
        cashbackSession: JSON.stringify(cashbackSession),
      });

      if (!cashbackSession?.selectedBank || !cashbackSession?.selectedCategories) {
        logger.warn('Session expired', { telegramId: ctx.from.id, categoryId });
        await ctx.answerCbQuery('‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.');
        return;
      }

      const bank = await this.bankService.getBankByCode(cashbackSession.selectedBank!);
      if (!bank) {
        logger.warn('Bank not found in toggle', {
          telegramId: ctx.from.id,
          bankCode: cashbackSession.selectedBank,
        });
        await ctx.editMessageText('‚ùå –ë–∞–Ω–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      const category = await this.categoryRepository.findById(categoryId);
      if (!category) {
        logger.warn('Category not found', { telegramId: ctx.from.id, categoryId });
        await ctx.answerCbQuery('‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
      }

      // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const index = cashbackSession.selectedCategories.indexOf(categoryId);
      const wasSelected = index > -1;

      if (wasSelected) {
        cashbackSession.selectedCategories.splice(index, 1);
      } else {
        cashbackSession.selectedCategories.push(categoryId);
      }

      logger.info('Category toggled', {
        telegramId: ctx.from.id,
        categoryId,
        categoryName: category.name,
        wasSelected,
        nowSelected: !wasSelected,
        totalSelected: cashbackSession.selectedCategories.length,
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
      const categories = await this.categoryService.getCategoriesByBank(bank.id);
      const keyboard = categories.map((cat) => {
        const isSelected = cashbackSession.selectedCategories?.includes(cat.id) || false;
        return [
          Markup.button.callback(
            `${isSelected ? '‚òë' : '‚òê'} ${cat.name}`,
            `toggle_category:${cat.id}`,
          ),
        ];
      });

      keyboard.push([Markup.button.callback('‚úÖ –ì–æ—Ç–æ–≤–æ', 'confirm_categories')]);

      await ctx.editMessageText(
        `üè¶ *${bank.name}*\n\nüìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–±—ç–∫–∞:\n\n` +
          `‚òê - –Ω–µ –≤—ã–±—Ä–∞–Ω–æ\n` +
          `‚òë - –≤—ã–±—Ä–∞–Ω–æ\n\n` +
          `–í—ã–±—Ä–∞–Ω–æ: ${cashbackSession.selectedCategories.length}`,
        {
          parse_mode: 'Markdown',
          reply_markup: Markup.inlineKeyboard(keyboard).reply_markup,
        },
      );

      await ctx.answerCbQuery();
    } catch (error) {
      logger.error('Error in handleToggleCategory:', {
        error,
        telegramId: ctx.from.id,
        categoryId,
        errorMessage: error instanceof Error ? error.message : 'Unknown error',
        errorStack: error instanceof Error ? error.stack : undefined,
      });
      await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
   */
  async handleConfirmCategories(ctx: Context) {
    if (!ctx.from) return;

    try {
      const session = ctx.session;
      const cashbackSession = session?.cashback;
      if (!cashbackSession?.selectedBank || !cashbackSession?.selectedCategories) {
        await ctx.editMessageText('‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.');
        return;
      }

      if (cashbackSession.selectedCategories.length === 0) {
        await ctx.answerCbQuery('‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é');
        return;
      }

      const bank = await this.bankService.getBankByCode(cashbackSession.selectedBank!);
      if (!bank) {
        await ctx.editMessageText('‚ùå –ë–∞–Ω–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏
      const user = await this.userService.getOrCreateUser({
        telegramId: ctx.from.id,
        username: ctx.from.username,
        firstName: ctx.from.first_name,
      });

      const limits = await this.cashbackService.checkSubscriptionLimits(user.id, bank.id);

      if (!limits.canAddBank) {
        await ctx.editMessageText(
          '‚ùå *–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –±–∞–Ω–∫–æ–≤ (4)*\n\n' +
            '–û—Ñ–æ—Ä–º–∏—Ç–µ Pro –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n' +
            '/subscription',
          { parse_mode: 'Markdown' },
        );
        return;
      }

      if (!limits.canAddCategory) {
        await ctx.editMessageText(
          '‚ùå *–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π (4) –¥–ª—è —ç—Ç–æ–≥–æ –±–∞–Ω–∫–∞*\n\n' +
            '–û—Ñ–æ—Ä–º–∏—Ç–µ Pro –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n' +
            '/subscription',
          { parse_mode: 'Markdown' },
        );
        return;
      }

      // –ù–∞—á–∏–Ω–∞–µ–º –≤–≤–æ–¥ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
      cashbackSession.waitingForRates = true;
      cashbackSession.currentCategoryIndex = 0;

      await this.showNextCategoryForRate(ctx);
    } catch (error) {
      logger.error('Error in handleConfirmCategories:', {
        error,
        telegramId: ctx.from.id,
      });
      await ctx.editMessageText('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞
   */
  private async showNextCategoryForRate(ctx: Context) {
    const session = ctx.session;
    const cashbackSession = session?.cashback;
    if (
      !cashbackSession?.selectedCategories ||
      cashbackSession.currentCategoryIndex === undefined
    ) {
      await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏');
      return;
    }

    const categoryId = cashbackSession.selectedCategories[cashbackSession.currentCategoryIndex];

    const category = await this.categoryRepository.findById(categoryId);
    if (!category) {
      await ctx.editMessageText('‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    const bank = await this.bankService.getBankByCode(cashbackSession.selectedBank!);
    if (!bank) {
      await ctx.editMessageText('‚ùå –ë–∞–Ω–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    const currentNum = cashbackSession.currentCategoryIndex + 1;
    const totalNum = cashbackSession.selectedCategories.length;

    await ctx.editMessageText(
      `üè¶ *${escapeMarkdown(bank.name)}*\n` +
        `üìÇ *${escapeMarkdown(category.name)}*\n\n` +
        `üí∞ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –∫—ç—à–±—ç–∫–∞ \\(—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100\\):\n\n` +
        `*–ü—Ä–æ–≥—Ä–µ—Å—Å:* ${currentNum}/${totalNum}`,
      { parse_mode: 'Markdown' },
    );
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∫—ç—à–±—ç–∫–∞
   */
  async handleCashbackRateInput(ctx: Context) {
    if (!ctx.from || !ctx.message || !('text' in ctx.message)) return;

    const session = ctx.session;
    const cashbackSession = session?.cashback;
    if (
      !cashbackSession?.waitingForRates ||
      !cashbackSession?.selectedBank ||
      !cashbackSession?.selectedCategories
    ) {
      return;
    }

    try {
      const text = ctx.message.text.trim();
      const cashbackRate = parseInt(text);

      if (isNaN(cashbackRate) || cashbackRate < 0 || cashbackRate > 100) {
        await ctx.reply(
          '‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç*\n\n' + '–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100\n' + '*–ü—Ä–∏–º–µ—Ä—ã:* 5, 10, 15',
          { parse_mode: 'Markdown' },
        );
        return;
      }

      const bank = await this.bankService.getBankByCode(cashbackSession.selectedBank!);
      if (!bank) {
        await ctx.reply('‚ùå –ë–∞–Ω–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      const user = await this.userService.getOrCreateUser({
        telegramId: ctx.from.id,
        username: ctx.from.username,
        firstName: ctx.from.first_name,
      });

      const categoryId = cashbackSession.selectedCategories[cashbackSession.currentCategoryIndex!];
      const category = await this.categoryRepository.findById(categoryId);
      if (!category) {
        await ctx.reply('‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∫—ç—à–±—ç–∫–∞
      await this.cashbackService.setCashbackRate(user.id, bank.id, categoryId, cashbackRate);

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      cashbackSession.currentCategoryIndex!++;

      if (cashbackSession.currentCategoryIndex! >= cashbackSession.selectedCategories.length) {
        // –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
        await ctx.reply(
          `‚úÖ *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫—ç—à–±—ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\\!*\n\n` +
            `–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–æ—Ü–µ–Ω—Ç—ã –¥–ª—è ${cashbackSession.selectedCategories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –±–∞–Ω–∫–µ ${escapeMarkdown(bank.name)}\\.`,
          { parse_mode: 'Markdown' },
        );

        // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
        cashbackSession.selectedBank = undefined;
        cashbackSession.selectedCategories = undefined;
        cashbackSession.waitingForRates = false;
        cashbackSession.currentCategoryIndex = undefined;
      } else {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        await this.showNextCategoryForRate(ctx);
      }

      logger.info('Cashback rate set', {
        userId: user.id,
        telegramId: ctx.from.id,
        bankCode: cashbackSession.selectedBank,
        categoryId,
        cashbackRate,
      });
    } catch (error) {
      logger.error('Error in handleCashbackRateInput:', {
        error,
        telegramId: ctx.from.id,
        message: ctx.message.text,
      });

      if (error instanceof Error && error.message.includes('–ª–∏–º–∏—Ç')) {
        await ctx.reply(`‚ùå ${error.message}`);
      } else {
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    }
  }

  /**
   * –ö–æ–º–∞–Ω–¥–∞: /my_cashback
   * –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–±—ç–∫–∞
   */
  async handleMyCashback(ctx: Context) {
    if (!ctx.from) return;

    try {
      const user = await this.userService.getOrCreateUser({
        telegramId: ctx.from.id,
        username: ctx.from.username,
        firstName: ctx.from.first_name,
      });

      const settings = await this.cashbackService.getUserCashbackSettings(user.id);

      if (settings.length === 0) {
        await ctx.reply(
          'üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫—ç—à–±—ç–∫–∞\n\n' + '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_cashback –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.',
        );
        return;
      }

      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –±–∞–Ω–∫–∞–º
      const groupedByBank = await this.cashbackService.getUserCashbackSettingsGrouped(user.id);

      let message = 'üí∞ –í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–±—ç–∫–∞:\n\n';

      for (const [bankName, bankSettings] of Object.entries(groupedByBank)) {
        message += `üè¶ ${escapeMarkdown(bankName)}:\n`;
        bankSettings.forEach((setting) => {
          const categoryName = setting.category?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è';
          message += `‚Ä¢ ${escapeMarkdown(categoryName)}: ${setting.cashbackRate}%\n`;
        });
        message += '\n';
      }

      message += '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_cashback –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫.';

      await ctx.reply(message, { parse_mode: 'Markdown' });
    } catch (error) {
      logger.error('Error in handleMyCashback:', { error, telegramId: ctx.from.id });
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  /**
   * –ö–æ–º–∞–Ω–¥–∞: /remove_cashback
   * –£–¥–∞–ª–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∫—ç—à–±—ç–∫–∞
   */
  async handleRemoveCashback(ctx: Context) {
    if (!ctx.from) return;

    try {
      const user = await this.userService.getOrCreateUser({
        telegramId: ctx.from.id,
        username: ctx.from.username,
        firstName: ctx.from.first_name,
      });

      const settings = await this.cashbackService.getUserCashbackSettings(user.id);

      if (settings.length === 0) {
        await ctx.reply('üìù –£ –≤–∞—Å –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫—ç—à–±—ç–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
        return;
      }

      const keyboard = settings.map((setting) => [
        Markup.button.callback(
          `${setting.bank?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–∞–Ω–∫'} - ${setting.category?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è'} (${setting.cashbackRate}%)`,
          `remove_cashback:${setting.bankId}:${setting.categoryId}`,
        ),
      ]);

      await ctx.reply('üóë –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', {
        reply_markup: Markup.inlineKeyboard(keyboard).reply_markup,
      });
    } catch (error) {
      logger.error('Error in handleRemoveCashback:', { error, telegramId: ctx.from.id });
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–±—ç–∫–∞
   */
  async handleRemoveCashbackConfirm(ctx: Context, bankId: number, categoryId: number) {
    if (!ctx.from) return;

    try {
      const user = await this.userService.getOrCreateUser({
        telegramId: ctx.from.id,
        username: ctx.from.username,
        firstName: ctx.from.first_name,
      });

      await this.cashbackService.removeCashbackSetting(user.id, bankId, categoryId);

      await ctx.editMessageText(
        '‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫—ç—à–±—ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞\n\n' +
          '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /my_cashback –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –Ω–∞—Å—Ç—Ä–æ–µ–∫.',
      );

      logger.info('Cashback setting removed', {
        userId: user.id,
        telegramId: ctx.from.id,
        bankId,
        categoryId,
      });
    } catch (error) {
      logger.error('Error in handleRemoveCashbackConfirm:', {
        error,
        telegramId: ctx.from.id,
        bankId,
        categoryId,
      });
      await ctx.editMessageText('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.');
    }
  }
}
