import { Context, Markup } from 'telegraf';
import { CategoryService } from '../services/categoryService';
import { PDFService } from '../services/pdfService';
import { AnalyticsService } from '../services/analyticsService';
import { AdminSettingsService } from '../services/adminSettingsService';
import { ServiceType } from '../database/entities/AdminSettings';
import { logger } from '../utils/logger';
import { escapeMarkdown } from '../utils/helpers';

export class AdminController {
  private adminUserIds: Set<number>;

  constructor(
    private categoryService: CategoryService,
    private pdfService: PDFService,
    private analyticsService: AnalyticsService,
    private adminSettingsService: AdminSettingsService,
  ) {
    // Parse admin user IDs from environment
    const adminIds =
      process.env.ADMIN_USER_IDS?.split(',').map((id) => parseInt(id.trim(), 10)) || [];
    this.adminUserIds = new Set(adminIds);
  }

  private isAdmin(userId: number): boolean {
    return this.adminUserIds.has(userId);
  }

  async handleAdminAddBank(ctx: Context) {
    if (!ctx.from || !this.isAdmin(ctx.from.id)) {
      await ctx.reply('‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.');
      return;
    }

    await ctx.reply(
      'üè¶ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–∞–Ω–∫–∞*\n\n' +
        '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n' +
        '```\n–ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞\n–ö–æ–¥ –±–∞–Ω–∫–∞\nURL –ª–æ–≥–æ—Ç–∏–ø–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)\n```',
      { parse_mode: 'MarkdownV2' },
    );
  }

  async handleAdminParsePDF(ctx: Context) {
    if (!ctx.from || !this.isAdmin(ctx.from.id)) {
      await ctx.reply('‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.');
      return;
    }

    await ctx.reply(
      'üìÑ *–ü–∞—Ä—Å–∏–Ω–≥ PDF*\n\n' +
        '–û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF —Ñ–∞–π–ª —Å —Ç–∞–±–ª–∏—Ü–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫—ç—à–±—ç–∫–∞.\n' +
        '–§–æ—Ä–º–∞—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ MCC\\-–∫–æ–¥—ã\\.',
      { parse_mode: 'MarkdownV2' },
    );
  }

  async handlePDFDocument(ctx: Context, bankId: number) {
    if (!ctx.from || !this.isAdmin(ctx.from.id)) {
      await ctx.reply('‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.');
      return;
    }

    try {
      if (!ctx.message || !('document' in ctx.message)) {
        await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF —Ñ–∞–π–ª.');
        return;
      }

      const document = ctx.message.document;
      if (!document.mime_type?.includes('pdf')) {
        await ctx.reply('‚ùå –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF.');
        return;
      }

      await ctx.reply('‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF —Ñ–∞–π–ª–∞...');

      // Download file
      const fileLink = await ctx.telegram.getFileLink(document.file_id);
      const response = await fetch(fileLink.href);
      const buffer = Buffer.from(await response.arrayBuffer());

      // Parse PDF
      const categories = await this.pdfService.parsePDF(buffer);

      if (!this.pdfService.validateCategories(categories)) {
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –≤ PDF.');
        return;
      }

      // Replace bank categories
      const created = await this.categoryService.replaceBankCategories(bankId, categories);

      await ctx.reply(
        `‚úÖ PDF —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n\n` +
          `–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${created.length}\n` +
          `–í—Å–µ–≥–æ MCC-–∫–æ–¥–æ–≤: ${created.reduce((sum, cat) => sum + cat.mccCodes.length, 0)}`,
      );

      logger.info('PDF parsed and categories created:', {
        bankId,
        categoriesCount: created.length,
        userId: ctx.from.id,
      });
    } catch (error) {
      logger.error('Error parsing PDF:', { error, userId: ctx.from.id });
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.');
    }
  }

  async handleAdminStats(ctx: Context) {
    if (!ctx.from || !this.isAdmin(ctx.from.id)) {
      await ctx.reply('‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.');
      return;
    }

    try {
      const stats = await this.analyticsService.getAdminStats();

      let message = 'üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:*\n\n';
      message += `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.totalUsers}\n`;
      message += `‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: ${stats.activeUsers}\n`;
      message += `‚ú® Pro –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ${stats.proUsers}\n\n`;
      message += `üîç –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${stats.totalQueries}\n`;
      message += `‚ö°Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${Math.round(stats.averageResponseTime)}ms\n\n`;

      if (stats.popularBanks.length > 0) {
        message += `üè¶ *–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –±–∞–Ω–∫–∏:*\n`;
        for (const bank of stats.popularBanks.slice(0, 5)) {
          message += `‚Ä¢ ${bank.name}: ${bank.count} –∑–∞–ø—Ä–æ—Å–æ–≤\n`;
        }
      }

      await ctx.replyWithMarkdownV2(message);
    } catch (error) {
      logger.error('Error in handleAdminStats:', { error, userId: ctx.from.id });
      throw error;
    }
  }

  /**
   * –ö–æ–º–∞–Ω–¥–∞: /admin_services
   * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞–º–∏
   */
  async handleAdminServices(ctx: Context) {
    if (!ctx.from || !this.isAdmin(ctx.from.id)) {
      await ctx.reply('‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.');
      return;
    }

    try {
      const services = this.adminSettingsService.getAvailableServices();
      const keyboard = services.map(service => [
        Markup.button.callback(
          `${service.name}`,
          `admin_service:${service.type}`,
        ),
      ]);

      keyboard.push([
        Markup.button.callback('üìä –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤', 'admin_status_all'),
        Markup.button.callback('üîÑ –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', 'admin_reset_settings'),
      ]);

      await ctx.reply(
        '‚öôÔ∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞–º–∏*\n\n' +
        '–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:',
        {
          parse_mode: 'Markdown',
          reply_markup: Markup.inlineKeyboard(keyboard).reply_markup,
        },
      );
    } catch (error) {
      logger.error('Error in handleAdminServices:', { error, userId: ctx.from.id });
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
   */
  async handleServiceSelection(ctx: Context, serviceType: ServiceType) {
    if (!ctx.from || !this.isAdmin(ctx.from.id)) {
      await ctx.answerCbQuery('‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
      return;
    }

    try {
      const services = this.adminSettingsService.getAvailableServices();
      const service = services.find(s => s.type === serviceType);
      
      if (!service) {
        await ctx.answerCbQuery('‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      const isEnabled = await this.adminSettingsService.isServiceEnabledForUser(ctx.from.id, serviceType);
      
      const keyboard = [
        [
          Markup.button.callback(
            `${isEnabled ? 'üî¥ –û—Ç–∫–ª—é—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω–æ' : 'üü¢ –í–∫–ª—é—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω–æ'}`,
            `admin_toggle_global:${serviceType}`,
          ),
        ],
        [
          Markup.button.callback(
            'üë§ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
            `admin_user_settings:${serviceType}`,
          ),
        ],
        [
          Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É', 'admin_services'),
        ],
      ];

      await ctx.editMessageText(
        `‚öôÔ∏è *${escapeMarkdown(service.name)}*\n\n` +
        `üìù ${escapeMarkdown(service.description)}\n\n` +
        `üåç –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${isEnabled ? 'üü¢ –í–∫–ª—é—á–µ–Ω' : 'üî¥ –û—Ç–∫–ª—é—á–µ–Ω'}\n\n` +
        `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
        {
          parse_mode: 'Markdown',
          reply_markup: Markup.inlineKeyboard(keyboard).reply_markup,
        },
      );
    } catch (error) {
      logger.error('Error in handleServiceSelection:', { error, userId: ctx.from.id, serviceType });
      await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  }

  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞
   */
  async handleToggleGlobalService(ctx: Context, serviceType: ServiceType) {
    if (!ctx.from || !this.isAdmin(ctx.from.id)) {
      await ctx.answerCbQuery('‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
      return;
    }

    try {
      const currentStatus = await this.adminSettingsService.isServiceEnabledForUser(ctx.from.id, serviceType);
      const newStatus = !currentStatus;
      
      await this.adminSettingsService.toggleGlobalService(
        serviceType,
        newStatus,
        `–ò–∑–º–µ–Ω–µ–Ω–æ –∞–¥–º–∏–Ω–æ–º ${ctx.from.username || ctx.from.id}`
      );

      const services = this.adminSettingsService.getAvailableServices();
      const service = services.find(s => s.type === serviceType);

      await ctx.editMessageText(
        `‚úÖ *${escapeMarkdown(service?.name || '–°–µ—Ä–≤–∏—Å')}*\n\n` +
        `–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${newStatus ? 'üü¢ –í–∫–ª—é—á–µ–Ω' : 'üî¥ –û—Ç–∫–ª—é—á–µ–Ω'}\n\n` +
        `–≠—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.`,
        {
          parse_mode: 'Markdown',
          reply_markup: Markup.inlineKeyboard([
            [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–µ—Ä–≤–∏—Å—É', `admin_service:${serviceType}`)],
            [Markup.button.callback('üìã –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã', 'admin_services')],
          ]).reply_markup,
        },
      );

      logger.info('Global service toggled', {
        adminId: ctx.from.id,
        serviceType,
        newStatus,
      });
    } catch (error) {
      logger.error('Error in handleToggleGlobalService:', { error, userId: ctx.from.id, serviceType });
      await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async handleUserServiceSettings(ctx: Context, serviceType: ServiceType) {
    if (!ctx.from || !this.isAdmin(ctx.from.id)) {
      await ctx.answerCbQuery('‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
      return;
    }

    try {
      const services = this.adminSettingsService.getAvailableServices();
      const service = services.find(s => s.type === serviceType);

      await ctx.editMessageText(
        `üë§ *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n` +
        `–°–µ—Ä–≤–∏—Å: ${escapeMarkdown(service?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}\n\n` +
        `–û—Ç–ø—Ä–∞–≤—å—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.\n\n` +
        `*–ü—Ä–∏–º–µ—Ä:* 123456789`,
        {
          parse_mode: 'Markdown',
          reply_markup: Markup.inlineKeyboard([
            [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–µ—Ä–≤–∏—Å—É', `admin_service:${serviceType}`)],
          ]).reply_markup,
        },
      );

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      ctx.session = ctx.session || {};
      ctx.session.admin = ctx.session.admin || {};
      ctx.session.admin.waitingForUserId = serviceType;
    } catch (error) {
      logger.error('Error in handleUserServiceSettings:', { error, userId: ctx.from.id, serviceType });
      await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
   */
  async handleUserIdInput(ctx: Context) {
    if (!ctx.from || !this.isAdmin(ctx.from.id)) {
      return;
    }

    const session = ctx.session;
    const adminSession = session?.admin;
    
    if (!adminSession?.waitingForUserId || !ctx.message || !('text' in ctx.message)) {
      return;
    }

    try {
      const userId = parseInt(ctx.message.text.trim());
      
      if (isNaN(userId)) {
        await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π Telegram ID.');
        return;
      }

      const serviceType = adminSession.waitingForUserId;
      const services = this.adminSettingsService.getAvailableServices();
      const service = services.find(s => s.type === serviceType);
      
      const isEnabled = await this.adminSettingsService.isServiceEnabledForUser(userId, serviceType);
      
      const keyboard = [
        [
          Markup.button.callback(
            `${isEnabled ? 'üî¥ –û—Ç–∫–ª—é—á–∏—Ç—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' : 'üü¢ –í–∫–ª—é—á–∏—Ç—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}`,
            `admin_toggle_user:${serviceType}:${userId}`,
          ),
        ],
        [
          Markup.button.callback(
            'üóë –£–¥–∞–ª–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É',
            `admin_remove_user:${serviceType}:${userId}`,
          ),
        ],
        [
          Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–µ—Ä–≤–∏—Å—É', `admin_service:${serviceType}`),
        ],
      ];

      await ctx.reply(
        `üë§ *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}*\n\n` +
        `–°–µ—Ä–≤–∏—Å: ${escapeMarkdown(service?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}\n` +
        `–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${isEnabled ? 'üü¢ –í–∫–ª—é—á–µ–Ω' : 'üî¥ –û—Ç–∫–ª—é—á–µ–Ω'}\n\n` +
        `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
        {
          parse_mode: 'Markdown',
          reply_markup: Markup.inlineKeyboard(keyboard).reply_markup,
        },
      );

      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
      adminSession.waitingForUserId = undefined;
    } catch (error) {
      logger.error('Error in handleUserIdInput:', { error, userId: ctx.from.id });
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
    }
  }

  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async handleToggleUserService(ctx: Context, serviceType: ServiceType, targetUserId: number) {
    if (!ctx.from || !this.isAdmin(ctx.from.id)) {
      await ctx.answerCbQuery('‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
      return;
    }

    try {
      const currentStatus = await this.adminSettingsService.isServiceEnabledForUser(targetUserId, serviceType);
      const newStatus = !currentStatus;
      
      await this.adminSettingsService.toggleUserService(
        targetUserId,
        serviceType,
        newStatus,
        `–ù–∞—Å—Ç—Ä–æ–µ–Ω–æ –∞–¥–º–∏–Ω–æ–º ${ctx.from.username || ctx.from.id}`
      );

      const services = this.adminSettingsService.getAvailableServices();
      const service = services.find(s => s.type === serviceType);

      await ctx.editMessageText(
        `‚úÖ *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetUserId}*\n\n` +
        `–°–µ—Ä–≤–∏—Å: ${escapeMarkdown(service?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}\n` +
        `–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${newStatus ? 'üü¢ –í–∫–ª—é—á–µ–Ω' : 'üî¥ –û—Ç–∫–ª—é—á–µ–Ω'}\n\n` +
        `–≠—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—É—é.`,
        {
          parse_mode: 'Markdown',
          reply_markup: Markup.inlineKeyboard([
            [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–µ—Ä–≤–∏—Å—É', `admin_service:${serviceType}`)],
          ]).reply_markup,
        },
      );

      logger.info('User service toggled', {
        adminId: ctx.from.id,
        targetUserId,
        serviceType,
        newStatus,
      });
    } catch (error) {
      logger.error('Error in handleToggleUserService:', { error, userId: ctx.from.id, serviceType, targetUserId });
      await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async handleRemoveUserSetting(ctx: Context, serviceType: ServiceType, targetUserId: number) {
    if (!ctx.from || !this.isAdmin(ctx.from.id)) {
      await ctx.answerCbQuery('‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
      return;
    }

    try {
      await this.adminSettingsService.removeUserSetting(targetUserId, serviceType);

      const services = this.adminSettingsService.getAvailableServices();
      const service = services.find(s => s.type === serviceType);

      await ctx.editMessageText(
        `‚úÖ *–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —É–¥–∞–ª–µ–Ω–∞*\n\n` +
        `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${targetUserId}\n` +
        `–°–µ—Ä–≤–∏—Å: ${escapeMarkdown(service?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}\n\n` +
        `–¢–µ–ø–µ—Ä—å –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–µ–π—Å—Ç–≤—É–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞.`,
        {
          parse_mode: 'Markdown',
          reply_markup: Markup.inlineKeyboard([
            [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–µ—Ä–≤–∏—Å—É', `admin_service:${serviceType}`)],
          ]).reply_markup,
        },
      );

      logger.info('User setting removed', {
        adminId: ctx.from.id,
        targetUserId,
        serviceType,
      });
    } catch (error) {
      logger.error('Error in handleRemoveUserSetting:', { error, userId: ctx.from.id, serviceType, targetUserId });
      await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
   */
  async handleStatusAllServices(ctx: Context) {
    if (!ctx.from || !this.isAdmin(ctx.from.id)) {
      await ctx.answerCbQuery('‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
      return;
    }

    try {
      const services = this.adminSettingsService.getAvailableServices();
      let message = 'üìä *–°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤:*\n\n';

      for (const service of services) {
        const isEnabled = await this.adminSettingsService.isServiceEnabledForUser(ctx.from.id, service.type);
        message += `${isEnabled ? 'üü¢' : 'üî¥'} ${escapeMarkdown(service.name)}\n`;
      }

      message += '\nüü¢ - –í–∫–ª—é—á–µ–Ω\nüî¥ - –û—Ç–∫–ª—é—á–µ–Ω';

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: Markup.inlineKeyboard([
          [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é', 'admin_services')],
        ]).reply_markup,
      });
    } catch (error) {
      logger.error('Error in handleStatusAllServices:', { error, userId: ctx.from.id });
      await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  }

  /**
   * –°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
   */
  async handleResetSettings(ctx: Context) {
    if (!ctx.from || !this.isAdmin(ctx.from.id)) {
      await ctx.answerCbQuery('‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
      return;
    }

    try {
      await this.adminSettingsService.initializeDefaultSettings();

      await ctx.editMessageText(
        '‚úÖ *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã*\n\n' +
        '–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –≤–∫–ª—é—á–µ–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.\n' +
        '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.',
        {
          parse_mode: 'Markdown',
          reply_markup: Markup.inlineKeyboard([
            [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é', 'admin_services')],
          ]).reply_markup,
        },
      );

      logger.info('Settings reset', { adminId: ctx.from.id });
    } catch (error) {
      logger.error('Error in handleResetSettings:', { error, userId: ctx.from.id });
      await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  }
}
