import { Context } from 'telegraf';
import { CategoryService } from '../services/categoryService';
import { PDFService } from '../services/pdfService';
import { AnalyticsService } from '../services/analyticsService';
import { logger } from '../utils/logger';

export class AdminController {
  private adminUserIds: Set<number>;

  constructor(
    private categoryService: CategoryService,
    private pdfService: PDFService,
    private analyticsService: AnalyticsService,
  ) {
    // Parse admin user IDs from environment
    const adminIds =
      process.env.ADMIN_USER_IDS?.split(',').map((id) => parseInt(id.trim(), 10)) || [];
    this.adminUserIds = new Set(adminIds);
  }

  private isAdmin(userId: number): boolean {
    return this.adminUserIds.has(userId);
  }

  async handleAdminAddBank(ctx: Context) {
    if (!ctx.from || !this.isAdmin(ctx.from.id)) {
      await ctx.reply('‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.');
      return;
    }

    await ctx.reply(
      'üè¶ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–∞–Ω–∫–∞*\n\n' +
        '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n' +
        '```\n–ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞\n–ö–æ–¥ –±–∞–Ω–∫–∞\nURL –ª–æ–≥–æ—Ç–∏–ø–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)\n```',
      { parse_mode: 'MarkdownV2' },
    );
  }

  async handleAdminParsePDF(ctx: Context) {
    if (!ctx.from || !this.isAdmin(ctx.from.id)) {
      await ctx.reply('‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.');
      return;
    }

    await ctx.reply(
      'üìÑ *–ü–∞—Ä—Å–∏–Ω–≥ PDF*\n\n' +
        '–û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF —Ñ–∞–π–ª —Å —Ç–∞–±–ª–∏—Ü–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫—ç—à–±—ç–∫–∞.\n' +
        '–§–æ—Ä–º–∞—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ MCC\\-–∫–æ–¥—ã\\.',
      { parse_mode: 'MarkdownV2' },
    );
  }

  async handlePDFDocument(ctx: Context, bankId: number) {
    if (!ctx.from || !this.isAdmin(ctx.from.id)) {
      await ctx.reply('‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.');
      return;
    }

    try {
      if (!ctx.message || !('document' in ctx.message)) {
        await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF —Ñ–∞–π–ª.');
        return;
      }

      const document = ctx.message.document;
      if (!document.mime_type?.includes('pdf')) {
        await ctx.reply('‚ùå –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF.');
        return;
      }

      await ctx.reply('‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF —Ñ–∞–π–ª–∞...');

      // Download file
      const fileLink = await ctx.telegram.getFileLink(document.file_id);
      const response = await fetch(fileLink.href);
      const buffer = Buffer.from(await response.arrayBuffer());

      // Parse PDF
      const categories = await this.pdfService.parsePDF(buffer);

      if (!this.pdfService.validateCategories(categories)) {
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –≤ PDF.');
        return;
      }

      // Replace bank categories
      const created = await this.categoryService.replaceBankCategories(bankId, categories);

      await ctx.reply(
        `‚úÖ PDF —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n\n` +
          `–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${created.length}\n` +
          `–í—Å–µ–≥–æ MCC-–∫–æ–¥–æ–≤: ${created.reduce((sum, cat) => sum + cat.mccCodes.length, 0)}`,
      );

      logger.info('PDF parsed and categories created:', {
        bankId,
        categoriesCount: created.length,
        userId: ctx.from.id,
      });
    } catch (error) {
      logger.error('Error parsing PDF:', { error, userId: ctx.from.id });
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.');
    }
  }

  async handleAdminStats(ctx: Context) {
    if (!ctx.from || !this.isAdmin(ctx.from.id)) {
      await ctx.reply('‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.');
      return;
    }

    try {
      const stats = await this.analyticsService.getAdminStats();

      let message = 'üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:*\n\n';
      message += `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.totalUsers}\n`;
      message += `‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: ${stats.activeUsers}\n`;
      message += `‚ú® Pro –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ${stats.proUsers}\n\n`;
      message += `üîç –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${stats.totalQueries}\n`;
      message += `‚ö°Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${Math.round(stats.averageResponseTime)}ms\n\n`;

      if (stats.popularBanks.length > 0) {
        message += `üè¶ *–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –±–∞–Ω–∫–∏:*\n`;
        for (const bank of stats.popularBanks.slice(0, 5)) {
          message += `‚Ä¢ ${bank.name}: ${bank.count} –∑–∞–ø—Ä–æ—Å–æ–≤\n`;
        }
      }

      await ctx.replyWithMarkdownV2(message);
    } catch (error) {
      logger.error('Error in handleAdminStats:', { error, userId: ctx.from.id });
      throw error;
    }
  }
}
