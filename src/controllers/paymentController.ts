import { Context } from 'telegraf';
import { PaymentService } from '../services/paymentService';
import { SubscriptionService } from '../services/subscriptionService';
import { UserService } from '../services/userService';
import { PRO_SUBSCRIPTION } from '../config/constants';
import { formatExpiryDate } from '../utils/helpers';
import { logger } from '../utils/logger';

export class PaymentController {
  constructor(
    private paymentService: PaymentService,
    private subscriptionService: SubscriptionService,
    private userService: UserService,
  ) {}

  async handleSubscription(ctx: Context) {
    if (!ctx.from) return;

    try {
      const user = await this.userService.getUserByTelegramId(ctx.from.id);
      if (!user) {
        await ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.');
        return;
      }

      const status = await this.subscriptionService.getSubscriptionStatus(user.id);

      let message = 'üí≥ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ*\n\n';

      if (status.type === 'pro' && status.isActive && status.expiryDate) {
        message += `‚ú® –¢–∞—Ä–∏—Ñ: *Pro*\n`;
        message += `üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${formatExpiryDate(status.expiryDate)}\n\n`;
        message += `‚úÖ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–Ω–∫–æ–≤\n`;
        message += `‚úÖ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n`;
        message += `‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤`;
      } else {
        message += `üì¶ –¢–∞—Ä–∏—Ñ: *Free*\n\n`;
        message += `üè¶ –ë–∞–Ω–∫–æ–≤: –¥–æ ${status.limits.maxBanks}\n`;
        message += `üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ –±–∞–Ω–∫: –¥–æ ${status.limits.maxCategoriesPerBank}\n\n`;
        message += `*Upgrade –¥–æ Pro:*\n`;
        message += `‚ú® –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–Ω–∫–æ–≤ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n`;
        message += `‚ö°Ô∏è –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤\n`;
        message += `üí∞ –¶–µ–Ω–∞: ${PRO_SUBSCRIPTION.price} Telegram Stars/–º–µ—Å—è—Ü\n\n`;
        message += `–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è Pro –ø–æ–¥–ø–∏—Å–∫–∏\\!`;

        await ctx.replyWithMarkdownV2(message, {
          reply_markup: {
            inline_keyboard: [[{ text: '‚ú® –ö—É–ø–∏—Ç—å Pro –ø–æ–¥–ø–∏—Å–∫—É', callback_data: 'buy_pro' }]],
          },
        });
        return;
      }

      await ctx.replyWithMarkdownV2(message);
    } catch (error) {
      logger.error('Error in handleSubscription:', { error, userId: ctx.from.id });
      throw error;
    }
  }

  async handleBuyProCallback(ctx: Context) {
    if (!ctx.from || !ctx.chat) return;

    try {
      const user = await this.userService.getUserByTelegramId(ctx.from.id);
      if (!user) {
        await ctx.answerCbQuery('–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      // Check if already Pro
      const status = await this.subscriptionService.getSubscriptionStatus(user.id);
      if (status.type === 'pro' && status.isActive) {
        await ctx.answerCbQuery('–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è Pro –ø–æ–¥–ø–∏—Å–∫–∞');
        return;
      }

      await this.paymentService.createProSubscriptionInvoice(ctx.chat.id, user.id);
      await ctx.answerCbQuery('–°—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');

      logger.info('Pro subscription invoice requested:', { userId: user.id });
    } catch (error) {
      logger.error('Error in handleBuyProCallback:', { error, userId: ctx.from.id });
      await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }
}
