import { Context } from 'telegraf';
import { UserService } from '../services/userService';
import { BankService } from '../services/bankService';
import { AnalyticsService } from '../services/analyticsService';
import { escapeMarkdown } from '../utils/helpers';
import { logger } from '../utils/logger';

export class BotController {
  constructor(
    private userService: UserService,
    private bankService: BankService,
    private analyticsService: AnalyticsService,
  ) {}

  async handleStart(ctx: Context) {
    if (!ctx.from) return;

    try {
      const user = await this.userService.getOrCreateUser({
        telegramId: ctx.from.id,
        username: ctx.from.username,
        firstName: ctx.from.first_name,
      });

      const welcomeMessage =
        `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Cashback-Help Bot!\n\n` +
        `–Ø –ø–æ–º–æ–≥—É –≤–∞–º:\n` +
        `üîç –ù–∞–π—Ç–∏ MCC-–∫–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Ç–æ–≤–∞—Ä–æ–≤/—É—Å–ª—É–≥\n` +
        `üè¶ –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫—ç—à–±—ç–∫–∞ –ø–æ MCC-–∫–æ–¥—É\n` +
        `‚≠êÔ∏è –°–æ—Ö—Ä–∞–Ω—è—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞\n` +
        `üí∞ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –∫—ç—à–±—ç–∫–∞\n\n` +
        `üìä –í–∞—à —Ç–∞—Ä–∏—Ñ: ${user.subscriptionType === 'pro' ? 'Pro ‚ú®' : 'Free'}\n\n` +
        `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥.`;

      await ctx.reply(welcomeMessage);

      logger.info('User started bot:', { userId: user.id, telegramId: ctx.from.id });
    } catch (error) {
      logger.error('Error in handleStart:', { error, userId: ctx.from.id });
      throw error;
    }
  }

  async handleHelp(ctx: Context) {
    const helpMessage =
      `üìñ *–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:*\n\n` +
      `üîç *–ü–æ–∏—Å–∫*\n` +
      `/search \\- –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ MCC\\-–∫–æ–¥—É\n` +
      `–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º:\n` +
      `‚Ä¢ "–∫–∞–∫–∏–µ mcc\\-–∫–æ–¥—ã –¥–ª—è –æ–¥–µ–∂–¥—ã –≤ –°–±–µ—Ä–µ"\n` +
      `‚Ä¢ "–∫ –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫–æ–¥ 5722"\n\n` +
      `üè¶ *–ë–∞–Ω–∫–∏ –∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ*\n` +
      `/banks \\- –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∞–Ω–∫–æ–≤\n` +
      `/favorites \\- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏\n\n` +
      `üí∞ *–ö—ç—à–±—ç–∫*\n` +
      `/set\\_cashback \\- –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –∫—ç—à–±—ç–∫–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n` +
      `/my\\_cashback \\- –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–±—ç–∫–∞\n` +
      `/remove\\_cashback \\- –£–¥–∞–ª–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∫—ç—à–±—ç–∫–∞\n\n` +
      `üí≥ *–ü–æ–¥–ø–∏—Å–∫–∞*\n` +
      `/subscription \\- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ\n` +
      `/stats \\- –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n\n` +
      `‚ùì /help \\- –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É`;

    await ctx.replyWithMarkdownV2(helpMessage);
  }

  async handleBanks(ctx: Context) {
    try {
      const banks = await this.bankService.getAllBanks();

      if (banks.length === 0) {
        await ctx.reply('–ë–∞–Ω–∫–∏ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.');
        return;
      }

      let message = 'üè¶ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –±–∞–Ω–∫–∏:*\n\n';

      for (const bank of banks) {
        message += `‚Ä¢ ${escapeMarkdown(bank.name)}\n`;
      }

      await ctx.replyWithMarkdownV2(message);
    } catch (error) {
      logger.error('Error in handleBanks:', { error });
      throw error;
    }
  }

  async handleStats(ctx: Context) {
    if (!ctx.from) return;

    try {
      const user = await this.userService.getUserByTelegramId(ctx.from.id);
      if (!user) {
        await ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
        return;
      }

      const stats = await this.analyticsService.getUserStats(user.id);

      const message =
        `üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n\n` +
        `–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${stats.totalQueries}\n` +
        `‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: ${stats.queriesByType.category_search}\n` +
        `‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ MCC\\-–∫–æ–¥–∞–º: ${stats.queriesByType.mcc_search}\n` +
        `‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: ${stats.queriesByType.favorite_view}\n\n` +
        `‚≠êÔ∏è –ò–∑–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${stats.favoriteCategories}\n` +
        `üí≥ –¢–∞—Ä–∏—Ñ: ${stats.subscriptionType === 'pro' ? 'Pro ‚ú®' : 'Free'}`;

      await ctx.replyWithMarkdownV2(message);
    } catch (error) {
      logger.error('Error in handleStats:', { error, userId: ctx.from.id });
      throw error;
    }
  }
}
