import { Context, Markup } from 'telegraf';
import { FavoriteRepository } from '../database/repositories/FavoriteRepository';
import { CategoryRepository } from '../database/repositories/CategoryRepository';
import { BankService } from '../services/bankService';
import { SubscriptionService } from '../services/subscriptionService';
import { UserService } from '../services/userService';
import { escapeMarkdown } from '../utils/helpers';
import { logger } from '../utils/logger';

interface FavoritesSession {
  selectedBank?: string;
  searchQuery?: string;
  waitingForCashbackRate?: boolean;
  selectedCategory?: number;
}

export class FavoritesController {
  constructor(
    private favoriteRepository: FavoriteRepository,
    private categoryRepository: CategoryRepository,
    private bankService: BankService,
    private subscriptionService: SubscriptionService,
    private userService: UserService,
  ) {}

  /**
   * –ö–æ–º–∞–Ω–¥–∞: /favorites
   * –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
   */
  async handleFavorites(ctx: Context) {
    if (!ctx.from) return;

    try {
      const user = await this.userService.getOrCreateUser({
        telegramId: ctx.from.id,
        username: ctx.from.username,
        firstName: ctx.from.first_name,
      });

      const favorites = await this.favoriteRepository.findByUserId(user.id);

      if (favorites.length === 0) {
        const keyboard = [[Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', 'favorites_add')]];

        await ctx.reply(
          '‚≠êÔ∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.\n\n' +
            '–î–æ–±–∞–≤—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ MCC-–∫–æ–¥–∞–º.',
          {
            reply_markup: Markup.inlineKeyboard(keyboard).reply_markup,
          },
        );
        return;
      }

      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –±–∞–Ω–∫–∞–º
      const byBank = new Map<number, any[]>();
      for (const fav of favorites) {
        if (!byBank.has(fav.bankId)) {
          byBank.set(fav.bankId, []);
        }
        byBank.get(fav.bankId)!.push(fav);
      }

      let message = '‚≠êÔ∏è –ò–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n\n';

      for (const [bankId, favs] of byBank) {
        const bank = await this.bankService.getBankById(bankId);
        if (!bank) continue;

        message += `üè¶ ${escapeMarkdown(bank.name)}:\n`;

        for (const fav of favs) {
          const cashbackText = fav.cashbackRate ? ` (${fav.cashbackRate}%)` : '';
          message += `‚Ä¢ ${escapeMarkdown(fav.category.name)}${cashbackText}\n`;
        }
        message += '\n';
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–∏–º–∏—Ç—ã –¥–ª—è Free –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const status = await this.subscriptionService.getSubscriptionStatus(ctx.from.id);
      if (status.type === 'free') {
        const bankCount = byBank.size;
        message += `üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –±–∞–Ω–∫–æ–≤: ${bankCount}/${status.limits.maxBanks}\n`;
      }

      const keyboard = [
        [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', 'favorites_add')],
        [Markup.button.callback('üóë –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', 'favorites_remove')],
      ];

      await ctx.reply(message, {
        reply_markup: Markup.inlineKeyboard(keyboard).reply_markup,
      });
    } catch (error) {
      logger.error('Error in handleFavorites:', { error, telegramId: ctx.from.id });
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
   */
  async handleAddFavorites(ctx: Context) {
    if (!ctx.from) return;

    try {
      const user = await this.userService.getOrCreateUser({
        telegramId: ctx.from.id,
        username: ctx.from.username,
        firstName: ctx.from.first_name,
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏
      const status = await this.subscriptionService.getSubscriptionStatus(ctx.from.id);
      const bankCount = await this.favoriteRepository.getBankIdsForUser(user.id);

      if (status.type === 'free' && bankCount.length >= status.limits.maxBanks) {
        await ctx.editMessageText(
          '‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –±–∞–Ω–∫–æ–≤ –¥–ª—è Free —Ç–∞—Ä–∏—Ñ–∞.\n\n' +
            '–û—Ñ–æ—Ä–º–∏—Ç–µ Pro –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n' +
            '/subscription',
        );
        return;
      }

      const banks = await this.bankService.getActiveBanks();
      const keyboard = banks.map((bank: any) => [
        Markup.button.callback(bank.name, `fav_select_bank:${bank.code}`),
      ]);

      await ctx.editMessageText('üè¶ –í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', {
        reply_markup: Markup.inlineKeyboard(keyboard).reply_markup,
      });
    } catch (error) {
      logger.error('Error in handleAddFavorites:', { error, telegramId: ctx.from.id });
      await ctx.editMessageText('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –±–∞–Ω–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
   */
  async handleSelectBank(ctx: Context, bankCode: string) {
    if (!ctx.from) return;

    try {
      const bank = await this.bankService.getBankByCode(bankCode);
      if (!bank) {
        await ctx.editMessageText('‚ùå –ë–∞–Ω–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      const user = await this.userService.getOrCreateUser({
        telegramId: ctx.from.id,
        username: ctx.from.username,
        firstName: ctx.from.first_name,
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–∞–Ω–∫–∞
      const status = await this.subscriptionService.getSubscriptionStatus(ctx.from.id);
      const categoriesInBank = await this.favoriteRepository.countByUserAndBank(user.id, bank.id);

      if (status.type === 'free' && categoriesInBank >= status.limits.maxCategoriesPerBank) {
        await ctx.editMessageText(
          '‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –±–∞–Ω–∫–∞ –Ω–∞ Free —Ç–∞—Ä–∏—Ñ–µ.\n\n' +
            '–û—Ñ–æ—Ä–º–∏—Ç–µ Pro –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n' +
            '/subscription',
        );
        return;
      }

      const categories = await this.categoryRepository.findByBankId(bank.id);
      const existingFavorites = await this.favoriteRepository.findByUserAndBank(user.id, bank.id);
      const existingCategoryIds = existingFavorites.map((fav) => fav.categoryId);

      // –§–∏–ª—å—Ç—Ä—É–µ–º —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const availableCategories = categories.filter((cat) => !existingCategoryIds.includes(cat.id));

      if (availableCategories.length === 0) {
        await ctx.editMessageText(
          `üìù –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è ${bank.name} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.`,
        );
        return;
      }

      const keyboard = [
        [Markup.button.callback('üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é', `fav_search:${bankCode}`)],
        ...availableCategories
          .slice(0, 10)
          .map((cat) => [
            Markup.button.callback(cat.name, `fav_select_category:${bankCode}:${cat.id}`),
          ]),
      ];

      if (availableCategories.length > 10) {
        keyboard.push([Markup.button.callback('üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ', `fav_show_all:${bankCode}`)]);
      }

      await ctx.editMessageText(`üè¶ ${bank.name}\n\nüìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:`, {
        reply_markup: Markup.inlineKeyboard(keyboard).reply_markup,
      });
    } catch (error) {
      logger.error('Error in handleSelectBank:', { error, telegramId: ctx.from.id, bankCode });
      await ctx.editMessageText('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
   */
  async handleSearchCategories(ctx: Context, bankCode: string) {
    if (!ctx.from) return;

    try {
      const bank = await this.bankService.getBankByCode(bankCode);
      if (!bank) {
        await ctx.editMessageText('‚ùå –ë–∞–Ω–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–Ω–∫ –≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
      (ctx as any).session = (ctx as any).session || {};
      (ctx as any).session.selectedBank = bankCode;

      await ctx.editMessageText(
        `üîç –ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ ${bank.name}\n\n` + '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞:',
      );
    } catch (error) {
      logger.error('Error in handleSearchCategories:', {
        error,
        telegramId: ctx.from.id,
        bankCode,
      });
      await ctx.editMessageText('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
   */
  async handleSearchResults(ctx: Context, searchQuery: string) {
    if (!ctx.from || !ctx.message || !('text' in ctx.message)) return;

    const session = (ctx as any).session as FavoritesSession;
    if (!session?.selectedBank) return;

    try {
      const bank = await this.bankService.getBankByCode(session.selectedBank);
      if (!bank) {
        await ctx.reply('‚ùå –ë–∞–Ω–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      const user = await this.userService.getOrCreateUser({
        telegramId: ctx.from.id,
        username: ctx.from.username,
        firstName: ctx.from.first_name,
      });

      const categories = await this.categoryRepository.findByBankId(bank.id);
      const existingFavorites = await this.favoriteRepository.findByUserAndBank(user.id, bank.id);
      const existingCategoryIds = existingFavorites.map((fav) => fav.categoryId);

      // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É –∏ –∏—Å–∫–ª—é—á–∞–µ–º —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ
      const searchResults = categories.filter(
        (cat) =>
          !existingCategoryIds.includes(cat.id) &&
          cat.name.toLowerCase().includes(searchQuery.toLowerCase()),
      );

      if (searchResults.length === 0) {
        await ctx.reply(
          `üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É "${searchQuery}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n` +
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.',
        );
        return;
      }

      const keyboard = searchResults
        .slice(0, 10)
        .map((cat) => [
          Markup.button.callback(cat.name, `fav_select_category:${session.selectedBank}:${cat.id}`),
        ]);

      await ctx.reply(
        `üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ "${searchQuery}" –≤ ${bank.name}:\n\n` +
          `–ù–∞–π–¥–µ–Ω–æ: ${searchResults.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`,
        {
          reply_markup: Markup.inlineKeyboard(keyboard).reply_markup,
        },
      );
    } catch (error) {
      logger.error('Error in handleSearchResults:', {
        error,
        telegramId: ctx.from.id,
        searchQuery,
      });
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  async handleSelectCategory(ctx: Context, bankCode: string, categoryId: number) {
    if (!ctx.from) return;

    try {
      const bank = await this.bankService.getBankByCode(bankCode);
      const category = await this.categoryRepository.findById(categoryId);

      if (!bank || !category) {
        await ctx.editMessageText('‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ —Å–µ—Å—Å–∏–∏
      (ctx as any).session = (ctx as any).session || {};
      (ctx as any).session.selectedCategory = categoryId;
      (ctx as any).session.waitingForCashbackRate = true;

      const keyboard = [
        [Markup.button.callback('üìã –ü–æ–∫–∞–∑–∞—Ç—å MCC-–∫–æ–¥—ã', `fav_show_mcc:${categoryId}`)],
        [
          Markup.button.callback(
            '‚úÖ –î–æ–±–∞–≤–∏—Ç—å –±–µ–∑ –ø—Ä–æ—Ü–µ–Ω—Ç–∞',
            `fav_add_no_rate:${bankCode}:${categoryId}`,
          ),
        ],
      ];

      await ctx.editMessageText(
        `üìÇ ${category.name}\n` +
          `üè¶ ${bank.name}\n\n` +
          `üí∞ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –∫—ç—à–±—ç–∫–∞ (–æ—Ç 0 –¥–æ 100) –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
        {
          reply_markup: Markup.inlineKeyboard(keyboard).reply_markup,
        },
      );
    } catch (error) {
      logger.error('Error in handleSelectCategory:', {
        error,
        telegramId: ctx.from.id,
        bankCode,
        categoryId,
      });
      await ctx.editMessageText('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å MCC-–∫–æ–¥—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  async handleShowMccCodes(ctx: Context, categoryId: number) {
    try {
      const category = await this.categoryRepository.findById(categoryId);
      if (!category) {
        await ctx.editMessageText('‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
      }

      const mccCodes = category.mccCodes.join(', ');
      const message = `üìã MCC-–∫–æ–¥—ã –¥–ª—è "${category.name}":\n\n${mccCodes}`;

      await ctx.editMessageText(message);
    } catch (error) {
      logger.error('Error in handleShowMccCodes:', { error, categoryId });
      await ctx.editMessageText('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  /**
   * –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞
   */
  async handleAddNoRate(ctx: Context, bankCode: string, categoryId: number) {
    await this.addFavoriteCategory(ctx, bankCode, categoryId, null);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∫—ç—à–±—ç–∫–∞
   */
  async handleCashbackRateInput(ctx: Context) {
    if (!ctx.from || !ctx.message || !('text' in ctx.message)) return;

    const session = (ctx as any).session as FavoritesSession;
    if (!session?.waitingForCashbackRate || !session?.selectedBank || !session?.selectedCategory) {
      return;
    }

    try {
      const text = ctx.message.text.trim();
      const cashbackRate = parseFloat(text);

      if (isNaN(cashbackRate) || cashbackRate < 0 || cashbackRate > 100) {
        await ctx.reply(
          '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç\n\n' + '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100\n' + '–ü—Ä–∏–º–µ—Ä—ã: 5, 10.5, 15',
        );
        return;
      }

      await this.addFavoriteCategory(
        ctx,
        session.selectedBank,
        session.selectedCategory,
        cashbackRate,
      );

      // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
      session.selectedBank = undefined;
      session.selectedCategory = undefined;
      session.waitingForCashbackRate = false;
    } catch (error) {
      logger.error('Error in handleCashbackRateInput:', {
        error,
        telegramId: ctx.from.id,
        message: ctx.message.text,
      });

      if (error instanceof Error && error.message.includes('–ª–∏–º–∏—Ç')) {
        await ctx.reply(`‚ùå ${error.message}`);
      } else {
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    }
  }

  /**
   * –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
   */
  private async addFavoriteCategory(
    ctx: Context,
    bankCode: string,
    categoryId: number,
    cashbackRate: number | null,
  ) {
    if (!ctx.from) return;

    try {
      const user = await this.userService.getOrCreateUser({
        telegramId: ctx.from.id,
        username: ctx.from.username,
        firstName: ctx.from.first_name,
      });

      const bank = await this.bankService.getBankByCode(bankCode);
      const category = await this.categoryRepository.findById(categoryId);

      if (!bank || !category) {
        await ctx.reply('‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ª–∏ —É–∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
      const exists = await this.favoriteRepository.exists(user.id, bank.id, categoryId);
      if (exists) {
        await ctx.reply('‚ö†Ô∏è –≠—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
      const canAddBank = await this.subscriptionService.canAddFavoriteBank(user.id);
      if (!canAddBank) {
        throw new Error('–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –±–∞–Ω–∫–æ–≤. –û—Ñ–æ—Ä–º–∏—Ç–µ Pro –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–∞.');
      }

      const canAddCategory = await this.subscriptionService.canAddFavoriteCategory(
        user.id,
        bank.id,
      );
      if (!canAddCategory) {
        throw new Error('–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –±–∞–Ω–∫–∞. –û—Ñ–æ—Ä–º–∏—Ç–µ Pro.');
      }

      await this.favoriteRepository.add(user.id, bank.id, categoryId, cashbackRate || undefined);

      const rateText = cashbackRate ? ` —Å –∫—ç—à–±—ç–∫–æ–º ${cashbackRate}%` : '';
      await ctx.reply(`‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è "${category.name}" –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ${rateText}!`);

      logger.info('Category added to favorites', {
        userId: user.id,
        telegramId: ctx.from.id,
        bankCode,
        categoryId,
        cashbackRate,
      });
    } catch (error) {
      logger.error('Error adding favorite category:', {
        error,
        telegramId: ctx.from.id,
        bankCode,
        categoryId,
        cashbackRate,
      });
      throw error;
    }
  }
  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
   */
  async handleRemoveFavorites(ctx: Context) {
    if (!ctx.from) return;

    try {
      const user = await this.userService.getOrCreateUser({
        telegramId: ctx.from.id,
        username: ctx.from.username,
        firstName: ctx.from.first_name,
      });

      const favorites = await this.favoriteRepository.findByUserId(user.id);

      if (favorites.length === 0) {
        await ctx.editMessageText('üìù –£ –≤–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
        return;
      }

      const keyboard = favorites.map((fav) => [
        Markup.button.callback(
          `${fav.bank?.name} - ${fav.category?.name}${fav.cashbackRate ? ` (${fav.cashbackRate}%)` : ''}`,
          `fav_remove:${fav.bankId}:${fav.categoryId}`,
        ),
      ]);

      await ctx.editMessageText('üóë –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', {
        reply_markup: Markup.inlineKeyboard(keyboard).reply_markup,
      });
    } catch (error) {
      logger.error('Error in handleRemoveFavorites:', { error, telegramId: ctx.from.id });
      await ctx.editMessageText('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  async handleRemoveCategory(ctx: Context, bankId: number, categoryId: number) {
    if (!ctx.from) return;

    try {
      const user = await this.userService.getOrCreateUser({
        telegramId: ctx.from.id,
        username: ctx.from.username,
        firstName: ctx.from.first_name,
      });

      const category = await this.categoryRepository.findById(categoryId);
      if (!category) {
        await ctx.editMessageText('‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
      }

      await this.favoriteRepository.remove(user.id, bankId, categoryId);

      await ctx.editMessageText(`‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è "${category.name}" —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.`);

      logger.info('Category removed from favorites', {
        userId: user.id,
        telegramId: ctx.from.id,
        bankId,
        categoryId,
      });
    } catch (error) {
      logger.error('Error in handleRemoveCategory:', {
        error,
        telegramId: ctx.from.id,
        bankId,
        categoryId,
      });
      await ctx.editMessageText('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.');
    }
  }
}
