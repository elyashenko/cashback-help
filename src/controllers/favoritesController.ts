import { Context } from 'telegraf';
import { FavoriteRepository } from '../database/repositories/FavoriteRepository';
import { CategoryRepository } from '../database/repositories/CategoryRepository';
import { BankService } from '../services/bankService';
import { SubscriptionService } from '../services/subscriptionService';
import { UserService } from '../services/userService';
import { escapeMarkdown } from '../utils/helpers';
import { logger } from '../utils/logger';

export class FavoritesController {
  constructor(
    private favoriteRepository: FavoriteRepository,
    private categoryRepository: CategoryRepository,
    private bankService: BankService,
    private subscriptionService: SubscriptionService,
    private userService: UserService,
  ) {}

  async handleFavorites(ctx: Context) {
    if (!ctx.from) return;

    try {
      const user = await this.userService.getUserByTelegramId(ctx.from.id);
      if (!user) {
        await ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.');
        return;
      }

      const favorites = await this.favoriteRepository.findByUserId(user.id);

      if (favorites.length === 0) {
        await ctx.reply(
          '‚≠êÔ∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.\n\n' +
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /search –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Ö –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.',
        );
        return;
      }

      // Group by bank
      const byBank = new Map<number, any[]>();
      
      for (const fav of favorites) {
        if (!byBank.has(fav.bankId)) {
          byBank.set(fav.bankId, []);
        }
        byBank.get(fav.bankId)!.push(fav);
      }

      let message = '‚≠êÔ∏è *–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:*\n\n';

      for (const [bankId, favs] of byBank) {
        const bank = await this.bankService.getBankById(bankId);
        if (!bank) continue;

        message += `üè¶ *${escapeMarkdown(bank.name)}*\n`;
        
        for (const fav of favs) {
          message += `‚Ä¢ ${escapeMarkdown(fav.category.name)}\n`;
          message += `  MCC: ${fav.category.mccCodes.slice(0, 3).join(', ')}`;
          if (fav.category.mccCodes.length > 3) {
            message += ` \\.\\.\\. \\+${fav.category.mccCodes.length - 3}`;
          }
          message += '\n';
        }
        message += '\n';
      }

      // Show limits for free users
      const status = await this.subscriptionService.getSubscriptionStatus(user.id);
      if (status.type === 'free') {
        const bankCount = byBank.size;
        message += `\nüìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –±–∞–Ω–∫–æ–≤: ${bankCount}/${status.limits.maxBanks}`;
      }

      await ctx.replyWithMarkdownV2(message);
    } catch (error) {
      logger.error('Error in handleFavorites:', { error, userId: ctx.from.id });
      throw error;
    }
  }

  async addFavorite(userId: number, categoryId: number, ctx: Context) {
    try {
      const category = await this.categoryRepository.findById(categoryId);
      if (!category) {
        await ctx.reply('‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
        return;
      }

      // Check if already in favorites
      const exists = await this.favoriteRepository.exists(userId, category.bankId, categoryId);
      if (exists) {
        await ctx.reply('‚ö†Ô∏è –≠—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º.');
        return;
      }

      // Check limits
      const canAddBank = await this.subscriptionService.canAddFavoriteBank(userId);
      if (!canAddBank) {
        await ctx.reply(
          '‚ö†Ô∏è –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –±–∞–Ω–∫–æ–≤ –¥–ª—è Free —Ç–∞—Ä–∏—Ñ–∞.\n\n' +
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscription –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ Pro.',
        );
        return;
      }

      const canAddCategory = await this.subscriptionService.canAddFavoriteCategory(
        userId,
        category.bankId,
      );
      if (!canAddCategory) {
        await ctx.reply(
          '‚ö†Ô∏è –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –±–∞–Ω–∫–∞ –Ω–∞ Free —Ç–∞—Ä–∏—Ñ–µ.\n\n' +
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscription –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ Pro.',
        );
        return;
      }

      await this.favoriteRepository.add(userId, category.bankId, categoryId);

      await ctx.reply(`‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è "${category.name}" –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!`);

      logger.info('Category added to favorites:', { userId, categoryId });
    } catch (error) {
      logger.error('Error adding favorite:', { error, userId, categoryId });
      throw error;
    }
  }

  async removeFavorite(userId: number, categoryId: number, ctx: Context) {
    try {
      const category = await this.categoryRepository.findById(categoryId);
      if (!category) {
        await ctx.reply('‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
        return;
      }

      await this.favoriteRepository.remove(userId, category.bankId, categoryId);

      await ctx.reply(`‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è "${category.name}" —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.`);

      logger.info('Category removed from favorites:', { userId, categoryId });
    } catch (error) {
      logger.error('Error removing favorite:', { error, userId, categoryId });
      throw error;
    }
  }
}

