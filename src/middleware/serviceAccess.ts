import { Context, NextFunction } from 'telegraf';
import { AdminSettingsService } from '../services/adminSettingsService';
import { ServiceType } from '../database/entities/AdminSettings';
import { logger } from '../utils/logger';

/**
 * Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
 */
export function createServiceAccessMiddleware(adminSettingsService: AdminSettingsService) {
  return async (ctx: Context, next: NextFunction) => {
    if (!ctx.from) {
      return next();
    }

    try {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      const serviceType = getServiceTypeFromContext(ctx);
      
      if (!serviceType) {
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–µ—Ä–≤–∏—Å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        return next();
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const isEnabled = await adminSettingsService.isServiceEnabledForUser(ctx.from.id, serviceType);
      
      if (!isEnabled) {
        await ctx.reply(
          'üö´ *–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω*\n\n' +
          '–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n' +
          '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
          { parse_mode: 'Markdown' }
        );
        
        logger.info('Service access denied', {
          userId: ctx.from.id,
          username: ctx.from.username,
          serviceType,
          command: ctx.message && 'text' in ctx.message ? ctx.message.text : 'unknown',
        });
        
        return; // –ù–µ –≤—ã–∑—ã–≤–∞–µ–º next(), –±–ª–æ–∫–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
      }

      // –°–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
      return next();
    } catch (error) {
      logger.error('Error in service access middleware:', {
        error,
        userId: ctx.from.id,
        username: ctx.from.username,
      });
      
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø (fail-open)
      return next();
    }
  };
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 */
function getServiceTypeFromContext(ctx: Context): ServiceType | null {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã
  if (ctx.message && 'text' in ctx.message) {
    const text = ctx.message.text;
    
    if (text.startsWith('/set_cashback')) {
      return ServiceType.SET_CASHBACK;
    }
    if (text.startsWith('/my_cashback')) {
      return ServiceType.MY_CASHBACK;
    }
    if (text.startsWith('/remove_cashback')) {
      return ServiceType.REMOVE_CASHBACK;
    }
    if (text.startsWith('/search')) {
      return ServiceType.SEARCH;
    }
    if (text.startsWith('/favorites')) {
      return ServiceType.FAVORITES;
    }
    if (text.startsWith('/subscription')) {
      return ServiceType.SUBSCRIPTION;
    }
    if (text.startsWith('/stats')) {
      return ServiceType.STATS;
    }
    if (text.startsWith('/banks')) {
      return ServiceType.BANKS;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º callback queries –¥–ª—è cashback —Ñ—É–Ω–∫—Ü–∏–π
  if (ctx.callbackQuery && 'data' in ctx.callbackQuery) {
    const data = ctx.callbackQuery.data;
    
    if (data.startsWith('select_bank:') || 
        data.startsWith('toggle_category:') || 
        data.startsWith('confirm_categories') ||
        data.startsWith('remove_cashback:')) {
      return ServiceType.SET_CASHBACK;
    }
    
    if (data.startsWith('fav_')) {
      return ServiceType.FAVORITES;
    }
    
    if (data === 'buy_pro') {
      return ServiceType.SUBSCRIPTION;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  const session = ctx.session;
  if (session) {
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–±—ç–∫–∞
    if (session.cashback?.waitingForRates || 
        session.cashback?.selectedBank || 
        session.cashback?.selectedCategories) {
      return ServiceType.SET_CASHBACK;
    }
    
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–±–æ—Ç—ã —Å –∏–∑–±—Ä–∞–Ω–Ω—ã–º
    if (session.favorites?.waitingForCashbackRate ||
        session.favorites?.selectedBank) {
      return ServiceType.FAVORITES;
    }
  }

  return null;
}

/**
 * Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω—Å–∫–∏–º —Ñ—É–Ω–∫—Ü–∏—è–º
 */
export function createAdminAccessMiddleware(adminSettingsService: AdminSettingsService) {
  return async (ctx: Context, next: NextFunction) => {
    if (!ctx.from) {
      return next();
    }

    try {
      const isAdmin = adminSettingsService.isAdmin(ctx.from.id);
      
      if (!isAdmin) {
        await ctx.reply('‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.');
        
        logger.warn('Admin access denied', {
          userId: ctx.from.id,
          username: ctx.from.username,
          command: ctx.message && 'text' in ctx.message ? ctx.message.text : 'unknown',
        });
        
        return; // –ë–ª–æ–∫–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
      }

      return next();
    } catch (error) {
      logger.error('Error in admin access middleware:', {
        error,
        userId: ctx.from.id,
        username: ctx.from.username,
      });
      
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–∞.');
      return;
    }
  };
}
